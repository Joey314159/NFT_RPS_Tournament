{"ast":null,"code":"import RPS_ABI from \"./RPS_ABI.json\";\nimport { BrowserProvider, Contract, parseEther, formatEther } from \"ethers\";\nimport { CONTRACT_ADDRESS } from \"./constants\";\nlet provider;\nlet signer;\nlet contract;\nconst initialize = async () => {\n  if (typeof window.ethereum != \"undefined\") {\n    provider = new BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new Contract(CONTRACT_ADDRESS, RPS_ABI, signer);\n  } else {\n    console.error(\"MetaMask is needed!\");\n  }\n};\ninitialize();\nexport const requestAccount = async () => {\n  try {\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    return accounts[0];\n  } catch (error) {\n    console.error(\"Error requesting account\");\n    return null;\n  }\n};\nexport const run = async () => {\n  const runtx = await contract.run({\n    gas: 9999999\n  });\n  await runtx.wait();\n  console.log(\"Game is done, winner decided!\");\n};\nexport const getWinner = async () => {\n  const getWinnertx = await contract.getWinner();\n  console.log(\"Winner is picked: \", getWinnertx);\n  return String(getWinnertx);\n};\nexport const getPlayers = async () => {\n  const players = await contract.getPlayers();\n  console.log(\"Players recieved: \", players);\n  return players;\n};\nexport const getNFTOwner = async tokenId => {\n  const nftOwner = await contract.getNFTOwner(tokenId);\n  console.log(\"NFT Owner for NFT ID: \", tokenId, \" is: \", nftOwner);\n  return nftOwner;\n};","map":{"version":3,"names":["RPS_ABI","BrowserProvider","Contract","parseEther","formatEther","CONTRACT_ADDRESS","provider","signer","contract","initialize","window","ethereum","getSigner","console","error","requestAccount","accounts","send","run","runtx","gas","wait","log","getWinner","getWinnertx","String","getPlayers","players","getNFTOwner","tokenId","nftOwner"],"sources":["/Users/ray/Developer/RockPaperScissorEmulator/client/src/utils/contractServices.js"],"sourcesContent":["import RPS_ABI from \"./RPS_ABI.json\";\nimport {BrowserProvider, Contract, parseEther, formatEther} from \"ethers\";\nimport { CONTRACT_ADDRESS} from \"./constants\";\n\nlet provider;\nlet signer;\nlet contract;\n\n\nconst initialize = async () => {\n    if (typeof window.ethereum != \"undefined\") {\n        provider = new BrowserProvider(window.ethereum);\n        signer = await provider.getSigner();\n        contract = new Contract(CONTRACT_ADDRESS, RPS_ABI, signer);\n    }\n    else {\n        console.error(\"MetaMask is needed!\");\n    }\n};\n\ninitialize();\n\nexport const requestAccount = async () => {\n    try{\n        const accounts  = await provider.send(\"eth_requestAccounts\", []);\n        return accounts[0];\n    }\n    catch (error) {\n        console.error(\"Error requesting account\");\n        return null;\n    }\n};\n\nexport const run = async () =>  {\n    const runtx = await contract.run({gas: 9999999});\n    await runtx.wait();\n    console.log(\"Game is done, winner decided!\");\n};\n\nexport const getWinner = async () => {\n    const getWinnertx = await contract.getWinner();\n    console.log(\"Winner is picked: \", getWinnertx);\n    return String(getWinnertx);\n};\n\nexport const getPlayers = async () => {\n    const players = await contract.getPlayers();\n    console.log(\"Players recieved: \", players);\n    return players;\n};\n\nexport const getNFTOwner = async (tokenId) => {\n    const nftOwner = await contract.getNFTOwner(tokenId);\n    console.log(\"NFT Owner for NFT ID: \", tokenId, \" is: \", nftOwner );\n    return nftOwner;\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AACpC,SAAQC,eAAe,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAO,QAAQ;AACzE,SAASC,gBAAgB,QAAO,aAAa;AAE7C,IAAIC,QAAQ;AACZ,IAAIC,MAAM;AACV,IAAIC,QAAQ;AAGZ,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC3B,IAAI,OAAOC,MAAM,CAACC,QAAQ,IAAI,WAAW,EAAE;IACvCL,QAAQ,GAAG,IAAIL,eAAe,CAACS,MAAM,CAACC,QAAQ,CAAC;IAC/CJ,MAAM,GAAG,MAAMD,QAAQ,CAACM,SAAS,CAAC,CAAC;IACnCJ,QAAQ,GAAG,IAAIN,QAAQ,CAACG,gBAAgB,EAAEL,OAAO,EAAEO,MAAM,CAAC;EAC9D,CAAC,MACI;IACDM,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;EACxC;AACJ,CAAC;AAEDL,UAAU,CAAC,CAAC;AAEZ,OAAO,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAG;IACC,MAAMC,QAAQ,GAAI,MAAMV,QAAQ,CAACW,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAChE,OAAOD,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,CACD,OAAOF,KAAK,EAAE;IACVD,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;IACzC,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAMI,GAAG,GAAG,MAAAA,CAAA,KAAa;EAC5B,MAAMC,KAAK,GAAG,MAAMX,QAAQ,CAACU,GAAG,CAAC;IAACE,GAAG,EAAE;EAAO,CAAC,CAAC;EAChD,MAAMD,KAAK,CAACE,IAAI,CAAC,CAAC;EAClBR,OAAO,CAACS,GAAG,CAAC,+BAA+B,CAAC;AAChD,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,WAAW,GAAG,MAAMhB,QAAQ,CAACe,SAAS,CAAC,CAAC;EAC9CV,OAAO,CAACS,GAAG,CAAC,oBAAoB,EAAEE,WAAW,CAAC;EAC9C,OAAOC,MAAM,CAACD,WAAW,CAAC;AAC9B,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,OAAO,GAAG,MAAMnB,QAAQ,CAACkB,UAAU,CAAC,CAAC;EAC3Cb,OAAO,CAACS,GAAG,CAAC,oBAAoB,EAAEK,OAAO,CAAC;EAC1C,OAAOA,OAAO;AAClB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC1C,MAAMC,QAAQ,GAAG,MAAMtB,QAAQ,CAACoB,WAAW,CAACC,OAAO,CAAC;EACpDhB,OAAO,CAACS,GAAG,CAAC,wBAAwB,EAAEO,OAAO,EAAE,OAAO,EAAEC,QAAS,CAAC;EAClE,OAAOA,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}