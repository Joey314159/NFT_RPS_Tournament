/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getNFTOwner"
      | "getPlayers"
      | "getWinner"
      | "nft"
      | "run"
      | "tourneyContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "tourneyWinner"): EventFragment;

  encodeFunctionData(
    functionFragment: "getNFTOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "run", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tourneyContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getNFTOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tourneyContract",
    data: BytesLike
  ): Result;
}

export namespace tourneyWinnerEvent {
  export type InputTuple = [winner: AddressLike, message: string];
  export type OutputTuple = [winner: string, message: string];
  export interface OutputObject {
    winner: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Main extends BaseContract {
  connect(runner?: ContractRunner | null): Main;
  waitForDeployment(): Promise<this>;

  interface: MainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNFTOwner: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  getWinner: TypedContractMethod<[], [string], "view">;

  nft: TypedContractMethod<[], [string], "view">;

  run: TypedContractMethod<[], [void], "nonpayable">;

  tourneyContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNFTOwner"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "run"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tourneyContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "tourneyWinner"
  ): TypedContractEvent<
    tourneyWinnerEvent.InputTuple,
    tourneyWinnerEvent.OutputTuple,
    tourneyWinnerEvent.OutputObject
  >;

  filters: {
    "tourneyWinner(address,string)": TypedContractEvent<
      tourneyWinnerEvent.InputTuple,
      tourneyWinnerEvent.OutputTuple,
      tourneyWinnerEvent.OutputObject
    >;
    tourneyWinner: TypedContractEvent<
      tourneyWinnerEvent.InputTuple,
      tourneyWinnerEvent.OutputTuple,
      tourneyWinnerEvent.OutputObject
    >;
  };
}
