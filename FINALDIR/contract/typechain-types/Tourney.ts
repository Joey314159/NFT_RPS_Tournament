/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TourneyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "gameStart"
      | "getResults"
      | "judge"
      | "roll"
      | "rolls"
      | "winners"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gameStart", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getResults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "judge",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "roll", values?: undefined): string;
  encodeFunctionData(functionFragment: "rolls", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "winners",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "gameStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "judge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rolls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winners", data: BytesLike): Result;
}

export interface Tourney extends BaseContract {
  connect(runner?: ContractRunner | null): Tourney;
  waitForDeployment(): Promise<this>;

  interface: TourneyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  gameStart: TypedContractMethod<[], [void], "nonpayable">;

  getResults: TypedContractMethod<[player: AddressLike], [bigint], "view">;

  judge: TypedContractMethod<
    [playerA: AddressLike, playerB: AddressLike],
    [string],
    "nonpayable"
  >;

  roll: TypedContractMethod<[], [bigint], "view">;

  rolls: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  winners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "gameStart"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getResults"
  ): TypedContractMethod<[player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "judge"
  ): TypedContractMethod<
    [playerA: AddressLike, playerB: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roll"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rolls"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "winners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  filters: {};
}
